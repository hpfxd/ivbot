/** Declaration file generated by dts-gen */

export class Chest {
    constructor(...args: any[]);

    close(...args: any[]): void;

    count(...args: any[]): void;

    deposit(...args: any[]): void;

    items(...args: any[]): void;

    withdraw(...args: any[]): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;

    static windowType: number;

}

export class Dispenser {
    constructor(...args: any[]);

    close(...args: any[]): void;

    count(...args: any[]): void;

    deposit(...args: any[]): void;

    items(...args: any[]): void;

    withdraw(...args: any[]): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;

    static windowType: number;

}

export class EnchantmentTable {
    constructor(...args: any[]);

    close(...args: any[]): void;

    enchant(...args: any[]): void;

    putLapis(...args: any[]): void;

    putTargetItem(...args: any[]): void;

    takeTargetItem(...args: any[]): void;

    targetItem(...args: any[]): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;

    static windowType: number;

}

export class Furnace {
    constructor(...args: any[]);

    close(...args: any[]): void;

    fuelItem(...args: any[]): void;

    inputItem(...args: any[]): void;

    outputItem(...args: any[]): void;

    putFuel(...args: any[]): void;

    putInput(...args: any[]): void;

    takeFuel(...args: any[]): void;

    takeInput(...args: any[]): void;

    takeOutput(...args: any[]): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;

    static windowType: number;

}

export class ScoreBoard {
    constructor(packet: any);

    add(name: any, value: any): any;

    remove(name: any): any;

    static positions: {
        belowName: any;
        list: any;
        sidebar: any;
    };

}

export const supportedVersions: string[];

export function BossBar(mcVersion: any): any;

export function Location(absoluteVector: any): void;

export function Painting(id: any, pos: any, name: any, direction: any): void;

export function createBot(options: any): any;

export namespace Chest {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static usingDomains: boolean;

    }

}

export namespace Dispenser {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static usingDomains: boolean;

    }

}

export namespace EnchantmentTable {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static usingDomains: boolean;

    }

}

export namespace Furnace {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static usingDomains: boolean;

    }

}

